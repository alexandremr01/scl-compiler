int input[3];
int hidden_biases[4];
int output_biases[1];
int hidden_weights[12];
int output_weights[4];

int relu(int x) {
    if (x > 0) {
        return x;
    }
    return 0;
}

int mlp_inference() {
    int output[1];
    int hidden_output[4];
    int i;
    int j;
    int aux;

    i = 0;
        hidden_output[i] = hidden_biases[i];
        j = 0;
        while ( j < 3 ) {
            aux = i * 3 + j;
            hidden_output[i] = hidden_output[i] + input[j] * hidden_weights[aux];
            j = j + 1;
        }
        hidden_output[i] = relu(hidden_output[i]);
        i = i + 1;
    
    return hidden_output[0];
}

void initialize_weights_biases() {
    hidden_biases[0] = 1;
    hidden_biases[1] = -2;
    hidden_biases[2] = 3;
    hidden_biases[3] = 0;

    output_biases[0] = -1;

    hidden_weights[0] = 2; hidden_weights[1] = -3; hidden_weights[2] = 4;
    hidden_weights[3] = -5; hidden_weights[4] = 1; hidden_weights[5] = -2;
    hidden_weights[6] = 3; hidden_weights[7] = 2; hidden_weights[8] = 1;
    hidden_weights[9] = -4; hidden_weights[10] = 3; hidden_weights[11] = -1;

    output_weights[0] = 3; output_weights[1] = -1; output_weights[2] = 2; output_weights[3] = 4;
}

int main() {
    int result; 

    input[0] = -1;
    input[1] = 0;
    input[2] = 1;

    initialize_weights_biases();

    result = mlp_inference();

    return result;
}
