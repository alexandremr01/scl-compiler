extern float input[123];

extern float weights1[6150];
extern float bias1[50];

extern float weights2[1250];
extern float bias2[25];

extern float weights_output[25];
extern float bias_output[1];

float relu(float x) {
    if (x > 0) {
        return x;
    }
    return 0.0;
}

float mlp_inference() {
    float hidden_layer1[50];
    float hidden_layer2[25];
    float output_layer[1];

    int i;
    int j;
    int aux;

    i = 0;
    while ( i < 50 ) {
        hidden_layer1[i] = bias1[i];
        j = 0;
        while ( j < 123 ) {
            aux = j + 123 * i;
            hidden_layer1[i] = hidden_layer1[i] + input[j] * weights1[aux];
            j = j + 1;
        }
        hidden_layer1[i] = relu(hidden_layer1[i]);
        i = i + 1;
    }

    i = 0;
    while ( i < 25 ) {
        hidden_layer2[i] = bias2[i];
        j = 0;
        while ( j < 50 ) {
            aux = j + 50*i;
            hidden_layer2[i] = hidden_layer2[i] + hidden_layer1[j] * weights2[aux];
            j = j + 1;
        }
        hidden_layer2[i] = relu(hidden_layer2[i]);
        i = i + 1;
    }


    i = 0;
    while ( i < 1 ) {
        output_layer[i] = bias_output[i];
        j = 0;
        while ( j < 25 ) {
            aux = j + 25*i;
            output_layer[i] = output_layer[i] + hidden_layer2[j] * weights_output[aux];
            j = j + 1;
        }
        i = i + 1;
    }

    return output_layer[0];
}

float main() {
    float result;
    result = mlp_inference();
    return result;
}